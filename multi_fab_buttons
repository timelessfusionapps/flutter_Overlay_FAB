class MultiFABbuttons extends StatefulWidget {
  const MultiFABbuttons({
    Key? key,
  }) : super(key: key);

  @override
  State<MultiFABbuttons> createState() => _MultiFABbuttonsState();
}

class _MultiFABbuttonsState extends State<MultiFABbuttons> with TickerProviderStateMixin {
  AnimationController? animationController;
  List animation = [];
  List icons = [Icons.home, Icons.settings, Icons.location_city];
  List colors = [Colors.green, Colors.blueGrey, Colors.purple];
  OverlayEntry? overlayEntry;
  GlobalKey globalKey = GlobalKey();

  @override
  void initState() {
    super.initState();
    animationController =
        AnimationController(vsync: this, duration: const Duration(seconds: 1));
    for (int i = 3; i > 0; i--) {
      animation.add(Tween(begin: 0.0, end: 1.0).animate(CurvedAnimation(
          parent: animationController!,
          curve: Interval(0.2 * i, 1.0, curve: Curves.ease))));
    }
  }

  _showOverLay() async {
    RenderBox? renderBox =
        globalKey.currentContext!.findRenderObject() as RenderBox?;
    Offset offset = renderBox!.localToGlobal(Offset.zero);

    OverlayState? overlayState = Overlay.of(context);
    overlayEntry = OverlayEntry(
      builder: (context) => Positioned(
        left: offset.dx,
        bottom: renderBox.size.height + 16,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            for (int i = 0; i < animation.length; i++)
              ScaleTransition(
                scale: animation[i],
                child: FloatingActionButton(
                  onPressed: () {
                    Fluttertoast.showToast(msg: 'Icon Button Pressed');
                  },
                  child: Icon(
                    icons[i],
                  ),
                  backgroundColor: colors[i],
                  mini: true,
                ),
              )
          ],
        ),
      ),
    );
    animationController!.addListener(() {
      overlayState!.setState(() {});
    });
    animationController!.forward();
    overlayState!.insert(overlayEntry!);

    await Future.delayed(const Duration(seconds: 5))
        .whenComplete(() => animationController!.reverse())
        .whenComplete(() => overlayEntry!.remove());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Animated Overlay'),
      ),
      floatingActionButton: FloatingActionButton(
        key: globalKey,
        onPressed: _showOverLay,
        child: const Icon(Icons.add),
      ),
    );
  }
}
